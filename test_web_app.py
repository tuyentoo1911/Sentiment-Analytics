#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script ƒë·ªÉ ki·ªÉm tra web app ho·∫°t ƒë·ªông
"""

import os
import sys
import subprocess
import time

def check_dependencies():
    """Ki·ªÉm tra dependencies"""
    print("Ki·ªÉm tra dependencies...")
    
    required_packages = [
        'streamlit', 'pandas', 'numpy', 'scikit-learn', 
        'nltk', 'textblob', 'vaderSentiment', 'scipy', 
        'joblib', 'plotly'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úì {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚úó {package} - MISSING")
    
    if missing_packages:
        print(f"\nC·∫ßn c√†i ƒë·∫∑t: {', '.join(missing_packages)}")
        print("Ch·∫°y: pip install -r requirements.txt")
        return False
    
    return True

def check_models():
    """Ki·ªÉm tra models"""
    print("\nKi·ªÉm tra models...")
    
    model_files = [
        'saved_models/complete_pipeline.pkl',
        'saved_models/tfidf_vectorizer.pkl',
        'saved_models/best_model.pkl'
    ]
    
    missing_models = []
    
    for model_file in model_files:
        if os.path.exists(model_file):
            size = os.path.getsize(model_file) / (1024 * 1024)  # MB
            print(f"‚úì {model_file} ({size:.1f} MB)")
        else:
            missing_models.append(model_file)
            print(f"‚úó {model_file} - MISSING")
    
    if missing_models:
        print(f"\nC·∫ßn c√≥ models: {', '.join(missing_models)}")
        print("Ch·∫°y notebook training ƒë·ªÉ t·∫°o models")
        return False
    
    return True

def test_system():
    """Test h·ªá th·ªëng ph√¢n t√≠ch"""
    print("\nTest h·ªá th·ªëng ph√¢n t√≠ch...")
    
    try:
        from sentiment_analysis_system import SentimentAnalysisSystem
        
        system = SentimentAnalysisSystem()
        
        if not system.pipeline:
            print("‚úó Kh√¥ng th·ªÉ load pipeline")
            return False
        
        # Test v·ªõi text m·∫´u
        test_text = "This product is amazing! Great quality and fast delivery."
        result = system.predict_single_text(test_text)
        
        if 'error' in result:
            print(f"‚úó Error: {result['error']}")
            return False
        
        print(f"‚úì Test th√†nh c√¥ng:")
        print(f"  Sentiment: {result['sentiment_label']}")
        print(f"  Score: {result['sentiment_score']:.3f}")
        print(f"  Rating: {result['predicted_rating']}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error: {e}")
        return False

def test_web_app():
    """Test web app"""
    print("\nTest web app...")
    
    try:
        # Import ƒë·ªÉ ki·ªÉm tra
        import web_app
        print("‚úì Web app import th√†nh c√¥ng")
        return True
    except Exception as e:
        print(f"‚úó Web app error: {e}")
        return False

def run_web_app():
    """Ch·∫°y web app"""
    print("\n" + "="*50)
    print("üöÄ CH·∫†Y WEB APP")
    print("="*50)
    
    try:
        print("ƒêang kh·ªüi ƒë·ªông Streamlit...")
        print("Web app s·∫Ω m·ªü t·∫°i: http://localhost:8501")
        print("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
        
        # Ch·∫°y streamlit
        subprocess.run([sys.executable, '-m', 'streamlit', 'run', 'web_app.py'])
        
    except KeyboardInterrupt:
        print("\nƒê√£ d·ª´ng web app")
    except Exception as e:
        print(f"L·ªói khi ch·∫°y web app: {e}")

def main():
    """H√†m ch√≠nh"""
    print("="*50)
    print("üß™ TEST WEB APP SENTIMENT ANALYSIS")
    print("="*50)
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        return
    
    # Ki·ªÉm tra models
    if not check_models():
        return
    
    # Test h·ªá th·ªëng
    if not test_system():
        return
    
    # Test web app
    if not test_web_app():
        return
    
    print("\n" + "="*50)
    print("‚úÖ T·∫§T C·∫¢ TEST ƒê·ªÄU PASS!")
    print("="*50)
    
    # H·ªèi c√≥ mu·ªën ch·∫°y web app kh√¥ng
    choice = input("\nB·∫°n c√≥ mu·ªën ch·∫°y web app kh√¥ng? (y/n): ").lower()
    
    if choice in ['y', 'yes']:
        run_web_app()
    else:
        print("\nƒê·ªÉ ch·∫°y web app, s·ª≠ d·ª•ng l·ªánh:")
        print("streamlit run web_app.py")

if __name__ == "__main__":
    main() 