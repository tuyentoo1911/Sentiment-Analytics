#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import time
from sentiment_analysis_system import SentimentAnalysisSystem

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ph√¢n T√≠ch C·∫£m X√∫c ƒê√°nh Gi√°",
    page_icon="üòä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS custom
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .positive { color: #28a745; }
    .negative { color: #dc3545; }
    .neutral { color: #6c757d; }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_sentiment_system():
    """Load h·ªá th·ªëng ph√¢n t√≠ch c·∫£m x√∫c (cached)"""
    try:
        system = SentimentAnalysisSystem()
        return system
    except Exception as e:
        st.error(f"L·ªói khi load model: {e}")
        return None

def render_sentiment_result(result):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch"""
    if 'error' in result:
        st.error(f"L·ªói: {result['error']}")
        return
    
    # T·∫°o layout columns
    col1, col2, col3 = st.columns(3)
    
    with col1:
        sentiment_color = "positive" if result['sentiment_label'] == ' Positive' else "negative" if result['sentiment_label'] == ' Negative' else "neutral"
        sentiment_percent = ((result['sentiment_score'] + 1) / 2) * 100  
        sentiment_emoji = "üòä" if result['sentiment_label'] == 'Positive' else "üò¢" if result['sentiment_label'] == 'Negative' else "üòê"
        st.markdown(f"""
        <div class="metric-card">
            <h4>C·∫£m X√∫c</h4>
            <h2 class="{sentiment_color}">{sentiment_emoji} {result['sentiment_label']}</h2>
            <p>ƒêi·ªÉm: {sentiment_percent:.1f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <h4>Rating D·ª± ƒêo√°n</h4>
            <h2>‚≠ê {result['predicted_rating']}</h2>
            <p>C∆∞·ªùng ƒë·ªô: {result['emotion_intensity'] * 100:.1f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <h4>ƒêi·ªÉm H·ªØu √çch</h4>
            <h2>üìä {result['helpfulness_score'] * 100:.1f}%</h2>
            <p>ƒê·ªô d√†i: {result['text_length']} k√Ω t·ª±</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Chi ti·∫øt sentiment
    st.subheader("Chi Ti·∫øt Ph√¢n T√≠ch")
    detailed = result['detailed_sentiment']
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**VADER Sentiment:**")
        st.write(f" ‚ò∫Ô∏è Positive: {detailed['vader_positive'] * 100:.1f}%")
        st.write(f" üò• Negative: {detailed['vader_negative'] * 100:.1f}%")
        st.write(f" üòê Neutral: {detailed['vader_neutral'] * 100:.1f}%")
        st.write(f" ü§î Compound: {((detailed['vader_compound'] + 1) / 2) * 100:.1f}%")
    
    with col2:
        st.write("**TextBlob Analysis:**")
        st.write(f" üí≠ Polarity: {((detailed['textblob_polarity'] + 1) / 2) * 100:.1f}%")
        st.write(f" üß† Subjectivity: {detailed['textblob_subjectivity'] * 100:.1f}%")
    
    # Bi·ªÉu ƒë·ªì
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=('VADER Components', 'TextBlob Analysis'),
        specs=[[{"type": "bar"}, {"type": "bar"}]]
    )
    
    # VADER chart - chuy·ªÉn sang %
    fig.add_trace(
        go.Bar(
            x=['Positive', 'Negative', 'Neutral'],
            y=[detailed['vader_positive'] * 100, detailed['vader_negative'] * 100, detailed['vader_neutral'] * 100],
            name='VADER',
            marker_color=['green', 'red', 'gray'],
            text=[f"{detailed['vader_positive'] * 100:.1f}%", 
                  f"{detailed['vader_negative'] * 100:.1f}%", 
                  f"{detailed['vader_neutral'] * 100:.1f}%"],
            textposition='outside'
        ),
        row=1, col=1
    )
    
    # TextBlob chart - chuy·ªÉn sang %
    fig.add_trace(
        go.Bar(
            x=['Polarity', 'Subjectivity'],
            y=[((detailed['textblob_polarity'] + 1) / 2) * 100, detailed['textblob_subjectivity'] * 100],
            name='TextBlob',
            marker_color=['blue', 'orange'],
            text=[f"{((detailed['textblob_polarity'] + 1) / 2) * 100:.1f}%", 
                  f"{detailed['textblob_subjectivity'] * 100:.1f}%"],
            textposition='outside'
        ),
        row=1, col=2
    )
    
    fig.update_layout(height=400, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

def render_batch_results(results):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch batch"""
    if not results:
        return
    
    # T·∫°o DataFrame
    df = pd.DataFrame(results)
    
    # Th·ªëng k√™ t·ªïng h·ª£p
    st.subheader("Th·ªëng K√™ T·ªïng H·ª£p")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng S·ªë Text", len(df))
    
    with col2:
        avg_sentiment = df['sentiment_score'].mean()
        avg_sentiment_percent = ((avg_sentiment + 1) / 2) * 100
        st.metric("Sentiment Trung B√¨nh", f"{avg_sentiment_percent:.1f}%")
    
    with col3:
        avg_rating = df['predicted_rating'].mean()
        st.metric("Rating Trung B√¨nh", f"{avg_rating:.1f} ‚≠ê")
    
    with col4:
        avg_helpfulness = df['helpfulness_score'].mean()
        st.metric("ƒêi·ªÉm H·ªØu √çch TB", f"{avg_helpfulness * 100:.1f}%")
    
    # Ph√¢n ph·ªëi sentiment
    st.subheader("Ph√¢n Ph·ªëi C·∫£m X√∫c")
    
    sentiment_counts = df['sentiment_label'].value_counts()
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_pie = px.pie(
            values=sentiment_counts.values,
            names=sentiment_counts.index,
            title="Ph√¢n Ph·ªëi Sentiment"
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        fig_hist = px.histogram(
            df, x='sentiment_score',
            title="Ph√¢n Ph·ªëi ƒêi·ªÉm Sentiment",
            nbins=20
        )
        st.plotly_chart(fig_hist, use_container_width=True)
    
    # B·∫£ng k·∫øt qu·∫£
    st.subheader("K·∫øt Qu·∫£ Chi Ti·∫øt")
    
    display_df = df[['text', 'sentiment_label', 'sentiment_score', 'predicted_rating', 'helpfulness_score']].copy()
    display_df['text'] = display_df['text'].str[:100] + "..."
    
    # Chuy·ªÉn ƒë·ªïi c√°c ƒëi·ªÉm s·ªë th√†nh %
    display_df['sentiment_score'] = ((display_df['sentiment_score'] + 1) / 2 * 100).round(1).astype(str) + "%"
    display_df['predicted_rating'] = display_df['predicted_rating'].astype(str) + " ‚≠ê"
    display_df['helpfulness_score'] = (display_df['helpfulness_score'] * 100).round(1).astype(str) + "%"
    
    display_df.columns = ['Text', 'Sentiment', 'ƒêi·ªÉm Sentiment', 'Rating', 'ƒêi·ªÉm H·ªØu √çch']
    
    st.dataframe(display_df, use_container_width=True)
    
    # Download CSV
    csv = df.to_csv(index=False)
    st.download_button(
        label=" T·∫£i K·∫øt Qu·∫£ CSV",
        data=csv,
        file_name="sentiment_analysis_results.csv",
        mime="text/csv"
    )

def main():
    """H√†m ch√≠nh c·ªßa web app"""
    
    # Header
    st.markdown('<h1 class="main-header"> H·ªá Th·ªëng Ph√¢n T√≠ch C·∫£m X√∫c ƒê√°nh Gi√°</h1>', unsafe_allow_html=True)
    
    # Load h·ªá th·ªëng
    system = load_sentiment_system()
    
    if not system or not system.pipeline:
        st.error(" Kh√¥ng th·ªÉ load model. Vui l√≤ng ki·ªÉm tra:")
        st.write("1. ƒê√£ ch·∫°y notebook hu·∫•n luy·ªán")
        st.write("2. Th∆∞ m·ª•c `saved_models/` c√≥ file `complete_pipeline.pkl`")
        return
    
    # Sidebar
    st.sidebar.title(" Th√¥ng Tin Model")
    st.sidebar.write(f"**Model:** {system.pipeline['model_name']}")
    st.sidebar.write(f"**Accuracy:** {system.pipeline['accuracy']:.4f}")
    st.sidebar.write("**T√≠nh nƒÉng:**")
    st.sidebar.write("- Ph√¢n t√≠ch c·∫£m x√∫c VADER + TextBlob")
    st.sidebar.write("- D·ª± ƒëo√°n rating")
    st.sidebar.write("- T√≠nh ƒëi·ªÉm h·ªØu √≠ch")
    
    # Tabs
    tab1, tab2, tab3 = st.tabs(["üìù Ph√¢n T√≠ch ƒê∆°n L·∫ª", "üìä Ph√¢n T√≠ch Batch", "üìÅ Upload File"])
    
    with tab1:
        st.header("Ph√¢n T√≠ch Text ƒê∆°n L·∫ª")
        
        # Text input
        text_input = st.text_area(
            "Nh·∫≠p text c·∫ßn ph√¢n t√≠ch:",
            placeholder="V√≠ d·ª•: This product is amazing! Great quality and fast delivery.",
            height=100
        )
        
        # Analyze button
        if st.button("üîç Ph√¢n T√≠ch", type="primary"):
            if text_input.strip():
                with st.spinner("ƒêang ph√¢n t√≠ch..."):
                    result = system.predict_single_text(text_input)
                    render_sentiment_result(result)
            else:
                st.warning("Vui l√≤ng nh·∫≠p text c·∫ßn ph√¢n t√≠ch!")
        
        # Examples
        st.subheader("V√≠ D·ª• M·∫´u")
        examples = [
            "This product is amazing! Great quality and fast delivery. I love it!",
            "Terrible product. Poor quality and bad customer service. Very disappointed.",
            "The product is okay, nothing special but does the job.",
            "Excellent coffee! Rich flavor and perfect aroma. Highly recommend!",
            "Bad taste, too expensive for what you get. Not worth it."
        ]
        
        for i, example in enumerate(examples, 1):
            if st.button(f"V√≠ d·ª• {i}: {example[:50]}..."):
                with st.spinner("ƒêang ph√¢n t√≠ch..."):
                    result = system.predict_single_text(example)
                    render_sentiment_result(result)
    
    with tab2:
        st.header("Ph√¢n T√≠ch Batch")
        
        # Text input for multiple texts
        batch_input = st.text_area(
            "Nh·∫≠p c√°c text c·∫ßn ph√¢n t√≠ch (m·ªói d√≤ng m·ªôt text):",
            placeholder="D√≤ng 1: Text th·ª© nh·∫•t\nD√≤ng 2: Text th·ª© hai\n...",
            height=200
        )
        
        if st.button("üîç Ph√¢n T√≠ch Batch", type="primary"):
            if batch_input.strip():
                texts = [line.strip() for line in batch_input.split('\n') if line.strip()]
                
                if texts:
                    with st.spinner(f"ƒêang ph√¢n t√≠ch {len(texts)} text..."):
                        results = []
                        progress_bar = st.progress(0)
                        
                        for i, text in enumerate(texts):
                            result = system.predict_single_text(text)
                            results.append(result)
                            progress_bar.progress((i + 1) / len(texts))
                        
                        progress_bar.empty()
                        render_batch_results(results)
                else:
                    st.warning("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt text!")
            else:
                st.warning("Vui l√≤ng nh·∫≠p text c·∫ßn ph√¢n t√≠ch!")
    
    with tab3:
        st.header("Upload File CSV")
        
        # File uploader
        uploaded_file = st.file_uploader("Ch·ªçn file CSV", type=['csv'])
        
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                
                st.subheader("Xem Tr∆∞·ªõc D·ªØ Li·ªáu")
                st.dataframe(df.head(), use_container_width=True)
                
                # Select text column
                text_column = st.selectbox(
                    "Ch·ªçn c·ªôt ch·ª©a text:",
                    options=df.columns
                )
                
                # Limit rows for demo
                max_rows = st.slider("S·ªë d√≤ng t·ªëi ƒëa ƒë·ªÉ ph√¢n t√≠ch (demo):", 1, min(100, len(df)), 10)
                
                if st.button("üîç Ph√¢n T√≠ch File", type="primary"):
                    df_sample = df.head(max_rows)
                    
                    with st.spinner(f"ƒêang ph√¢n t√≠ch {len(df_sample)} d√≤ng..."):
                        results = []
                        progress_bar = st.progress(0)
                        
                        for i, row in df_sample.iterrows():
                            text = row[text_column]
                            result = system.predict_single_text(text)
                            result['original_index'] = i
                            results.append(result)
                            progress_bar.progress((i + 1) / len(df_sample))
                        
                        progress_bar.empty()
                        render_batch_results(results)
                        
            except Exception as e:
                st.error(f"L·ªói khi ƒë·ªçc file: {e}")
    
    # Footer
    st.markdown("---")
    st.markdown("**H·ªá Th·ªëng Ph√¢n T√≠ch C·∫£m X√∫c** - Powered by Streamlit")

if __name__ == "__main__":
    main() 